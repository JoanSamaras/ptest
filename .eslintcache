[{"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx":"1","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts":"2","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx":"3","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts":"4","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx":"5","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts":"6","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx":"7","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts":"8","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts":"9","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx":"10","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts":"11","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts":"12","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts":"13","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts":"14","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts":"15","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts":"16","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts":"17","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx":"18","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx":"19","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\paginator.tsx":"20","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\buttons.tsx":"21","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\icons.tsx":"22"},{"size":529,"mtime":1608124076215,"results":"23","hashOfConfig":"24"},{"size":508,"mtime":1608124076216,"results":"25","hashOfConfig":"24"},{"size":560,"mtime":1608124204700,"results":"26","hashOfConfig":"24"},{"size":796,"mtime":1608124076216,"results":"27","hashOfConfig":"24"},{"size":2074,"mtime":1608124233694,"results":"28","hashOfConfig":"24"},{"size":867,"mtime":1608124142319,"results":"29","hashOfConfig":"24"},{"size":2943,"mtime":1608124233695,"results":"30","hashOfConfig":"24"},{"size":983,"mtime":1608124142321,"results":"31","hashOfConfig":"24"},{"size":533,"mtime":1608124142325,"results":"32","hashOfConfig":"24"},{"size":1469,"mtime":1608124233695,"results":"33","hashOfConfig":"24"},{"size":379,"mtime":1608124142323,"results":"34","hashOfConfig":"24"},{"size":240,"mtime":1608124142323,"results":"35","hashOfConfig":"24"},{"size":532,"mtime":1608124142325,"results":"36","hashOfConfig":"24"},{"size":194,"mtime":1608124142324,"results":"37","hashOfConfig":"24"},{"size":1618,"mtime":1608124142322,"results":"38","hashOfConfig":"24"},{"size":323,"mtime":1608124142322,"results":"39","hashOfConfig":"24"},{"size":628,"mtime":1608124233696,"results":"40","hashOfConfig":"24"},{"size":6667,"mtime":1608124233694,"results":"41","hashOfConfig":"24"},{"size":1124,"mtime":1608124204701,"results":"42","hashOfConfig":"24"},{"size":3935,"mtime":1608124233693,"results":"43","hashOfConfig":"24"},{"size":3189,"mtime":1608124233693,"results":"44","hashOfConfig":"24"},{"size":842,"mtime":1608124233693,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13t0y2s",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts",[],[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx",["94"],"import React from 'react';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { Cell, TableWrapper, Thead, Tbody, Tfoot, FullWidthRow } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { calculateCellView } from './cell-view';\r\n\r\ntype Props = {\r\n    columnHeaders: string[]\r\n    displayedColumnHeaders?: Dictionary<string>\r\n    data: any[]\r\n}\r\n\r\nexport const StyledTable = ( p: Props ): JSX.Element => {\r\n    const {\r\n        columnHeaders,\r\n        displayedColumnHeaders,\r\n        data\r\n    } = p;\r\n\r\n    return (\r\n        <TableWrapper\r\n            style={{\r\n                height: '95%'\r\n            }}\r\n        >\r\n            <Thead>\r\n                <FullWidthRow>\r\n                    { columnHeaders.map( header => (\r\n                        <Cell \r\n                            key={ header }\r\n                            style={{\r\n                                width: '10rem',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            <Text colour='extraDark' weight='bold'>\r\n                                { displayedColumnHeaders && displayedColumnHeaders[ header ] \r\n                                    ? displayedColumnHeaders[ header ] \r\n                                    : header \r\n                                }\r\n                            </Text>\r\n                        </Cell>\r\n                    ) ) }\r\n                </FullWidthRow>\r\n            </Thead>\r\n\r\n            <Tbody>\r\n                { data.map( d => (\r\n                    <FullWidthRow key={ JSON.stringify( d ) } withBorderBottom>\r\n                        { columnHeaders.map( ( header, index ) => (\r\n                            calculateCellView( d[ header ], columnHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                ) ) }\r\n            </Tbody>\r\n\r\n            <Tfoot>\r\n                <FullWidthRow>\r\n                    <Cell>Cats win!</Cell>\r\n                </FullWidthRow>\r\n            </Tfoot>\r\n\r\n        </TableWrapper>\r\n    );\r\n}; \r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx",["95","96","97"],"import React, { useCallback } from 'react';\r\nimport { Cell, FullWidthRow, TableWrapper, Tbody, Thead } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { fontColours } from 'design-system/font-colours';\r\nimport { fontSizes } from 'design-system/font-sizes';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { spacings } from 'design-system/spacings';\r\n\r\nexport enum CellViewType {\r\n    plainText,\r\n    unorderedList,\r\n    embeddedTable\r\n}\r\n\r\ntype BasicCellProps = {\r\n    colour?: keyof typeof fontColours \r\n    size?: keyof typeof fontSizes\r\n    withPaddingBottom?: boolean\r\n};\r\n\r\nexport type TextCellProps = BasicCellProps & {\r\n    text?: string \r\n    parentHeader: string\r\n};\r\n\r\nexport const SimpleTextCellView = ( p: TextCellProps ): JSX.Element => {\r\n    const {\r\n        text,\r\n        parentHeader,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n\r\n    return (\r\n        <Cell \r\n            key={ `${ text }_${ parentHeader }` } \r\n            withPaddingBottom={ withPaddingBottom }\r\n            style={{\r\n                width: '10rem',\r\n                textAlign: 'center',\r\n                marginTop: '1em'\r\n            }}\r\n        >\r\n            <Text colour={ colour } size={ size }>\r\n                { text }\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type ListCellProps = BasicCellProps & {\r\n    data: string[]\r\n};\r\n\r\nexport const UnorderedListCellView = ( p: ListCellProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n\r\n    \r\n    return (\r\n        <Cell withPaddingBottom={ withPaddingBottom }>\r\n            <Text colour={ colour } size={ size }>\r\n                <ul key={ JSON.stringify( data ) || data.join( '' ) }>\r\n                    { data.map( ( d, index ) => (\r\n                        <li \r\n                            style={{\r\n                                marginBottom: spacings._4,\r\n                                maxWidth: '10rem'\r\n                            }}\r\n                            key={ `${ d }_${ index }` }\r\n                        >\r\n                            { d }\r\n                        </li>\r\n                    ) ) }\r\n                </ul>\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type EmbeddedTableProps = {\r\n    data: any[]\r\n    headers: string[]\r\n    displayedHeaders?: Dictionary<string>\r\n}\r\n\r\nexport const EmbeddedTableCellView = ( p: EmbeddedTableProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        headers,\r\n        displayedHeaders\r\n    } = p;\r\n\r\n    const filteredHeaders = headers.filter( h => h.length > 1 && !parseInt( h ) );\r\n    const view = useCallback( ( data: any | null, parent: string ) => {\r\n        const fromattedData = Array.isArray( data ) && data.length === 1\r\n            ? data[0]\r\n            : data;\r\n\r\n        return calculateCellView( fromattedData, parent );\r\n    }, [] );\r\n\r\n    return (\r\n        <Cell key={ JSON.stringify( data ) }>\r\n            <TableWrapper>\r\n                { filteredHeaders.length > 0 && (\r\n                    <Thead>\r\n                        <FullWidthRow>\r\n                            { filteredHeaders.map( header => (\r\n                                <Cell \r\n                                    key={ header }\r\n                                    style={{\r\n                                        width: '10rem'\r\n                                    }}\r\n                                >\r\n                                    <Text colour='extraDark' weight='bold'>\r\n                                        { displayedHeaders && displayedHeaders[header] \r\n                                            ? displayedHeaders[header]\r\n                                            : header \r\n                                        }\r\n                                    </Text>\r\n                                </Cell>\r\n                            ) ) }\r\n                        </FullWidthRow>\r\n                    </Thead>\r\n                ) }\r\n\r\n                <Tbody>\r\n                    <FullWidthRow>\r\n                        { data.map( ( d, index ) => (\r\n                            view( d, filteredHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                </Tbody>\r\n            </TableWrapper>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nconst views = {\r\n    [ CellViewType.plainText ]: ( props: TextCellProps ) => {\r\n        if ( props.text ) {\r\n            return (\r\n                <SimpleTextCellView \r\n                    text={ props.text }\r\n                    parentHeader={ props.parentHeader }\r\n                    colour={ props.colour }\r\n                    size={ props.size }\r\n                    withPaddingBottom={ props.withPaddingBottom }\r\n                />\r\n            )\r\n        } else {\r\n            return <SimpleTextCellView parentHeader={ props.parentHeader } />\r\n        }\r\n    },\r\n\r\n    [ CellViewType.unorderedList ]: ( props: ListCellProps ) => {\r\n        return (\r\n            <UnorderedListCellView\r\n                data={ props.data }\r\n                colour={ props.colour }\r\n                size={ props.size }\r\n                withPaddingBottom={ props.withPaddingBottom }\r\n            />\r\n        )\r\n    },\r\n\r\n    [ CellViewType.embeddedTable ]: ( props: EmbeddedTableProps ) => {\r\n        return (\r\n            <EmbeddedTableCellView\r\n                data={ props.data }\r\n                headers={ props.headers }\r\n                displayedHeaders={ props.displayedHeaders }\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nexport const calculateCellView = ( cellData: any | null, parentHeader: string ): JSX.Element => {\r\n    let cellView;\r\n    \r\n    if ( cellData ) {\r\n        if ( typeof cellData === 'string' ) {\r\n            cellView = views[ CellViewType.plainText ]( {\r\n                text: cellData,\r\n                parentHeader \r\n            } )\r\n        } else {\r\n            if ( Array.isArray( cellData ) && typeof cellData[0] === 'string' ) {\r\n                // presenting a string array as unordered list\r\n                cellView = views[ CellViewType.unorderedList ]( {\r\n                    data: cellData\r\n                } );\r\n\r\n                return cellView;\r\n            } else {\r\n                cellView = views[ CellViewType.embeddedTable ]( {\r\n                    data: Object.values( cellData ),\r\n                    headers: Object.keys( cellData )\r\n                } );\r\n\r\n                return cellView;\r\n            }\r\n        }\r\n    } else {\r\n        cellView = views[ CellViewType.plainText ]( {\r\n            parentHeader\r\n        } )\r\n    }\r\n\r\n    return cellView;\r\n};\r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\paginator.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\buttons.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\icons.tsx",["98"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colours } from 'design-system/colours';\r\nimport { spacings } from 'design-system/spacings';\r\nimport { KeyboardArrowRight as KeyboardArrowRightSVG } from '@styled-icons/material/KeyboardArrowRight';\r\nimport { KeyboardArrowLeft as KeyboardArrowLeftSVG } from '@styled-icons/material/KeyboardArrowLeft';\r\n\r\ntype IconProps = {\r\n    colour?: string\r\n    height?: string\r\n};\r\n\r\nexport const ArrowRightIcon = styled( KeyboardArrowRightSVG )<IconProps>`\r\n    height: ${ p => p.height ? p.height : spacings._5 };\r\n    color: ${ p => p.colour ? p.colour : colours.grey4 };\r\n`;\r\n\r\nexport const ArrowLeftIcon = styled( KeyboardArrowLeftSVG )<IconProps>`\r\n    height: ${ p => p.height ? p.height : spacings._5 };\r\n    color: ${ p => p.colour ? p.colour : colours.grey4 };\r\n`;\r\n",{"ruleId":"99","severity":1,"message":"100","line":10,"column":11,"nodeType":"101","messageId":"102","endLine":10,"endColumn":14,"suggestions":"103"},{"ruleId":"99","severity":1,"message":"100","line":87,"column":11,"nodeType":"101","messageId":"102","endLine":87,"endColumn":14,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"100","line":100,"column":39,"nodeType":"101","messageId":"102","endLine":100,"endColumn":42,"suggestions":"105"},{"ruleId":"99","severity":1,"message":"100","line":184,"column":46,"nodeType":"101","messageId":"102","endLine":184,"endColumn":49,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":13},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["111","112"],["113","114"],["115","116"],["117","118"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar",{"messageId":"119","fix":"120","desc":"121"},{"messageId":"122","fix":"123","desc":"124"},{"messageId":"119","fix":"125","desc":"121"},{"messageId":"122","fix":"126","desc":"124"},{"messageId":"119","fix":"127","desc":"121"},{"messageId":"122","fix":"128","desc":"124"},{"messageId":"119","fix":"129","desc":"121"},{"messageId":"122","fix":"130","desc":"124"},"suggestUnknown",{"range":"131","text":"132"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"131","text":"133"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"134","text":"132"},{"range":"134","text":"133"},{"range":"135","text":"132"},{"range":"135","text":"133"},{"range":"136","text":"132"},{"range":"136","text":"133"},[364,367],"unknown","never",[2342,2345],[2710,2713],[5628,5631]]