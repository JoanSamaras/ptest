[{"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx":"1","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts":"2","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx":"3","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts":"4","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx":"5","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx":"6","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts":"7","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts":"8","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts":"9","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx":"10","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx":"11","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx":"12","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts":"13","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\paginator.tsx":"14","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts":"15","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts":"16","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts":"17","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts":"18","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts":"19","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts":"20","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\buttons.tsx":"21","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\icons.tsx":"22","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\z-indexes.ts":"23"},{"size":529,"mtime":1608124344593,"results":"24","hashOfConfig":"25"},{"size":508,"mtime":1608124344594,"results":"26","hashOfConfig":"25"},{"size":560,"mtime":1608124344576,"results":"27","hashOfConfig":"25"},{"size":867,"mtime":1608124344586,"results":"28","hashOfConfig":"25"},{"size":2074,"mtime":1608124344587,"results":"29","hashOfConfig":"25"},{"size":2965,"mtime":1608139173996,"results":"30","hashOfConfig":"25"},{"size":983,"mtime":1608124344588,"results":"31","hashOfConfig":"25"},{"size":533,"mtime":1608124344592,"results":"32","hashOfConfig":"25"},{"size":1618,"mtime":1608124344589,"results":"33","hashOfConfig":"25"},{"size":1124,"mtime":1608124344578,"results":"34","hashOfConfig":"25"},{"size":1469,"mtime":1608124344587,"results":"35","hashOfConfig":"25"},{"size":7296,"mtime":1608139173996,"results":"36","hashOfConfig":"25"},{"size":796,"mtime":1608124344594,"results":"37","hashOfConfig":"25"},{"size":4215,"mtime":1608144417427,"results":"38","hashOfConfig":"25"},{"size":240,"mtime":1608124344589,"results":"39","hashOfConfig":"25"},{"size":379,"mtime":1608124344590,"results":"40","hashOfConfig":"25"},{"size":194,"mtime":1608124344591,"results":"41","hashOfConfig":"25"},{"size":532,"mtime":1608124344591,"results":"42","hashOfConfig":"25"},{"size":628,"mtime":1608124344592,"results":"43","hashOfConfig":"25"},{"size":323,"mtime":1608124344589,"results":"44","hashOfConfig":"25"},{"size":3189,"mtime":1608124344577,"results":"45","hashOfConfig":"25"},{"size":842,"mtime":1608124344578,"results":"46","hashOfConfig":"25"},{"size":153,"mtime":1608124344592,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"13t0y2s",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx",[],[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx",["98"],"import React, { useState } from 'react';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { Cell, TableWrapper, Thead, Tbody, Tfoot, FullWidthRow } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { calculateCellView } from './cell-view';\r\nimport { Paginator } from 'components/paginator';\r\n\r\ntype Props = {\r\n    columnHeaders: string[]\r\n    displayedColumnHeaders?: Dictionary<string>\r\n    data: any[]\r\n}\r\n\r\nconst availablePageSizes: number[] = [\r\n    5,\r\n    10,\r\n    15,\r\n    20,\r\n    25\r\n];\r\n\r\nexport const StyledTable = ( p: Props ): JSX.Element => {\r\n    const {\r\n        columnHeaders,\r\n        displayedColumnHeaders,\r\n        data\r\n    } = p;\r\n\r\n    const [ currentPage, setPage ] = useState( 1 );\r\n    const [ currentPageSize, setPageSize ] = useState( availablePageSizes[0] );\r\n    \r\n    const paginatedData = data.slice( ( currentPage-1 ) * currentPageSize, currentPage * currentPageSize );\r\n\r\n    return (\r\n        <TableWrapper\r\n            style={{\r\n                height: '95%'\r\n            }}\r\n        >\r\n            <Thead>\r\n                <FullWidthRow>\r\n                    { columnHeaders.map( header => (\r\n                        <Cell \r\n                            key={ header }\r\n                            style={{\r\n                                width: '10rem',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            <Text colour='extraDark' weight='bold'>\r\n                                { displayedColumnHeaders && displayedColumnHeaders[ header ] \r\n                                    ? displayedColumnHeaders[ header ] \r\n                                    : header \r\n                                }\r\n                            </Text>\r\n                        </Cell>\r\n                    ) ) }\r\n                </FullWidthRow>\r\n            </Thead>\r\n\r\n            <Tbody>\r\n                { paginatedData.map( d => (\r\n                    <FullWidthRow key={ JSON.stringify( [ d, ...columnHeaders ] ) } withBorderBottom>\r\n                        { columnHeaders.map( ( header, index ) => (\r\n                            calculateCellView( d[ header ], columnHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                ) ) }\r\n            </Tbody>\r\n\r\n            <Tfoot>\r\n                <FullWidthRow>\r\n                    <Cell>\r\n                        <Paginator \r\n                            total={ data.length }\r\n                            page={ currentPage } \r\n                            pageSize={ currentPageSize } \r\n                            toPage={ page => setPage( page ) } \r\n                            setPageSize={ setPageSize }\r\n                            itemsPerPage={ availablePageSizes }\r\n                        />\r\n                    </Cell>\r\n                </FullWidthRow>\r\n            </Tfoot>\r\n\r\n        </TableWrapper>\r\n    );\r\n}; \r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx",["99","100","101"],"import React, { useCallback } from 'react';\r\nimport { Cell, FullWidthRow, TableWrapper, Tbody, Thead } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { fontColours } from 'design-system/font-colours';\r\nimport { fontSizes } from 'design-system/font-sizes';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { spacings } from 'design-system/spacings';\r\n\r\nexport enum CellViewType {\r\n    plainText,\r\n    unorderedList,\r\n    embeddedTable\r\n}\r\n\r\ntype BasicCellProps = {\r\n    colour?: keyof typeof fontColours \r\n    size?: keyof typeof fontSizes\r\n    withPaddingBottom?: boolean\r\n};\r\n\r\nexport type TextCellProps = BasicCellProps & {\r\n    text?: string \r\n    parentHeader: string\r\n};\r\n\r\nexport const SimpleTextCellView = ( p: TextCellProps ): JSX.Element => {\r\n    const {\r\n        text,\r\n        parentHeader,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n\r\n    return (\r\n        <Cell \r\n            key={ `${ text }_${ parentHeader }` } \r\n            withPaddingBottom={ withPaddingBottom }\r\n            style={{\r\n                width: '10rem',\r\n                textAlign: 'center',\r\n                marginTop: '1em'\r\n            }}\r\n        >\r\n            <Text colour={ colour } size={ size }>\r\n                { text }\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type ListCellProps = BasicCellProps & {\r\n    data: string[]\r\n};\r\n\r\nexport const UnorderedListCellView = ( p: ListCellProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n    \r\n    return (\r\n        <Cell withPaddingBottom={ withPaddingBottom }>\r\n            <Text colour={ colour } size={ size }>\r\n                <ul key={ JSON.stringify( data ) }>\r\n                    { data.map( ( d, index ) => (\r\n                        <li \r\n                            style={{\r\n                                marginBottom: spacings._4,\r\n                                maxWidth: '10rem'\r\n                            }}\r\n                            key={ `${ d }_${ index }` }\r\n                        >\r\n                            { d }\r\n                        </li>\r\n                    ) ) }\r\n                </ul>\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type EmbeddedTableProps = {\r\n    data: any[]\r\n    headers: string[]\r\n    displayedHeaders?: Dictionary<string>\r\n    parentHeader: string\r\n}\r\n\r\nexport const EmbeddedTableCellView = ( p: EmbeddedTableProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        headers,\r\n        displayedHeaders,\r\n        parentHeader\r\n    } = p;\r\n\r\n    const filteredHeaders = headers.filter( h => h.length > 1 && !parseInt( h ) );\r\n    const view = useCallback( ( data: any | null, parent: string ) => {\r\n        const fromattedData = Array.isArray( data ) && data.length === 1\r\n            ? data[0]\r\n            : data;\r\n\r\n        return calculateCellView( fromattedData, parent );\r\n    }, [] );\r\n\r\n    return (\r\n        <Cell key={ JSON.stringify( data ) }>\r\n            <TableWrapper>\r\n                { filteredHeaders.length > 0 && (\r\n                    <Thead>\r\n                        <FullWidthRow>\r\n                            { filteredHeaders.map( header => (\r\n                                <Cell \r\n                                    key={ header }\r\n                                    style={{\r\n                                        width: '10rem'\r\n                                    }}\r\n                                >\r\n                                    <Text colour='extraDark' weight='bold'>\r\n                                        { displayedHeaders && displayedHeaders[header] \r\n                                            ? displayedHeaders[header]\r\n                                            : header \r\n                                        }\r\n                                    </Text>\r\n                                </Cell>\r\n                            ) ) }\r\n                        </FullWidthRow>\r\n                    </Thead>\r\n                ) }\r\n\r\n                <Tbody>\r\n                    <FullWidthRow key={ JSON.stringify( [ parentHeader, ...data, ...headers ] ) }>\r\n                        { data.map( ( d, index ) => (\r\n                            view( d, filteredHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                </Tbody>\r\n            </TableWrapper>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nconst views = {\r\n    [ CellViewType.plainText ]: ( props: TextCellProps ) => {\r\n        if ( props.text ) {\r\n            return (\r\n                <SimpleTextCellView \r\n                    key={ `${ props.text }_${ props.parentHeader }` }\r\n                    text={ props.text }\r\n                    parentHeader={ props.parentHeader }\r\n                    colour={ props.colour }\r\n                    size={ props.size }\r\n                    withPaddingBottom={ props.withPaddingBottom }\r\n                />\r\n            );\r\n        } else {\r\n            return <SimpleTextCellView key={ `${ props.text }__${ props.parentHeader }` } parentHeader={ props.parentHeader } />\r\n        }\r\n    },\r\n\r\n    [ CellViewType.unorderedList ]: ( props: ListCellProps ) => {\r\n        return (\r\n            <UnorderedListCellView \r\n                key={ JSON.stringify( props.data ) }\r\n                data={ props.data }\r\n                colour={ props.colour }\r\n                size={ props.size }\r\n                withPaddingBottom={ props.withPaddingBottom }\r\n            />\r\n        );\r\n    },\r\n\r\n    [ CellViewType.embeddedTable ]: ( props: EmbeddedTableProps ) => {\r\n        return (\r\n            <EmbeddedTableCellView\r\n                key={ JSON.stringify( [ ...props.headers, ...props.data ] ) }\r\n                data={ props.data }\r\n                headers={ props.headers }\r\n                displayedHeaders={ props.displayedHeaders } \r\n                parentHeader={ props.parentHeader }\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport const calculateCellView = ( cellData: any | null, parentHeader: string ): JSX.Element => {\r\n    let cellView;\r\n    \r\n    if ( cellData ) {\r\n        if ( typeof cellData === 'string' ) {\r\n            cellView = views[ CellViewType.plainText ]( {\r\n                text: cellData,\r\n                parentHeader \r\n            } );\r\n        } else {\r\n            if ( Array.isArray( cellData ) && typeof cellData[0] === 'string' ) {\r\n                // presenting a string array as unordered list\r\n                cellView = views[ CellViewType.unorderedList ]( {\r\n                    data: cellData\r\n                } );\r\n            } else {\r\n                if ( Object.values( cellData ).length > 0 ) {\r\n                    cellView = views[ CellViewType.embeddedTable ]( {\r\n                        data: Object.values( cellData ),\r\n                        headers: Object.keys( cellData ),\r\n                        parentHeader\r\n                    } );\r\n                } else {\r\n                    cellView = views[ CellViewType.plainText ]( {\r\n                        parentHeader\r\n                    } );\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        cellView = views[ CellViewType.plainText ]( {\r\n            parentHeader\r\n        } );\r\n    }\r\n\r\n    return cellView;\r\n};\r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\paginator.tsx",["102"],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\buttons.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\icons.tsx",["103"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colours } from 'design-system/colours';\r\nimport { spacings } from 'design-system/spacings';\r\nimport { KeyboardArrowRight as KeyboardArrowRightSVG } from '@styled-icons/material/KeyboardArrowRight';\r\nimport { KeyboardArrowLeft as KeyboardArrowLeftSVG } from '@styled-icons/material/KeyboardArrowLeft';\r\n\r\ntype IconProps = {\r\n    colour?: string\r\n    height?: string\r\n};\r\n\r\nexport const ArrowRightIcon = styled( KeyboardArrowRightSVG )<IconProps>`\r\n    height: ${ p => p.height ? p.height : spacings._5 };\r\n    color: ${ p => p.colour ? p.colour : colours.grey4 };\r\n`;\r\n\r\nexport const ArrowLeftIcon = styled( KeyboardArrowLeftSVG )<IconProps>`\r\n    height: ${ p => p.height ? p.height : spacings._5 };\r\n    color: ${ p => p.colour ? p.colour : colours.grey4 };\r\n`;\r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\z-indexes.ts",[],{"ruleId":"104","severity":1,"message":"105","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":14,"suggestions":"108"},{"ruleId":"104","severity":1,"message":"105","line":86,"column":11,"nodeType":"106","messageId":"107","endLine":86,"endColumn":14,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"105","line":101,"column":39,"nodeType":"106","messageId":"107","endLine":101,"endColumn":42,"suggestions":"110"},{"ruleId":"104","severity":1,"message":"105","line":189,"column":46,"nodeType":"106","messageId":"107","endLine":189,"endColumn":49,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":13},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["117","118"],["119","120"],["121","122"],["123","124"],"@typescript-eslint/no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.",{"messageId":"125","fix":"126","desc":"127"},{"messageId":"128","fix":"129","desc":"130"},{"messageId":"125","fix":"131","desc":"127"},{"messageId":"128","fix":"132","desc":"130"},{"messageId":"125","fix":"133","desc":"127"},{"messageId":"128","fix":"134","desc":"130"},{"messageId":"125","fix":"135","desc":"127"},{"messageId":"128","fix":"136","desc":"130"},"suggestUnknown",{"range":"137","text":"138"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"137","text":"139"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"140","text":"138"},{"range":"140","text":"139"},{"range":"141","text":"138"},{"range":"141","text":"139"},{"range":"142","text":"138"},{"range":"142","text":"139"},[429,432],"unknown","never",[2321,2324],[2738,2741],[6033,6036]]