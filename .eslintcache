[{"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx":"1","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts":"2","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx":"3","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts":"4","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx":"5","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts":"6","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts":"7","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts":"8","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts":"9","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts":"10","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts":"11","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts":"12","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts":"13","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx":"14","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx":"15","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts":"16","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts":"17","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx":"18","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx":"19"},{"size":512,"mtime":1607794878804,"results":"20","hashOfConfig":"21"},{"size":493,"mtime":1607795862058,"results":"22","hashOfConfig":"21"},{"size":535,"mtime":1607814638853,"results":"23","hashOfConfig":"21"},{"size":796,"mtime":1607814999566,"results":"24","hashOfConfig":"21"},{"size":1800,"mtime":1607892566172,"results":"25","hashOfConfig":"21"},{"size":867,"mtime":1607797808868,"results":"26","hashOfConfig":"21"},{"size":960,"mtime":1607802050088,"results":"27","hashOfConfig":"21"},{"size":186,"mtime":1607799311012,"results":"28","hashOfConfig":"21"},{"size":230,"mtime":1602443491468,"results":"29","hashOfConfig":"21"},{"size":520,"mtime":1607799311012,"results":"30","hashOfConfig":"21"},{"size":367,"mtime":1602443882997,"results":"31","hashOfConfig":"21"},{"size":1559,"mtime":1607801935110,"results":"32","hashOfConfig":"21"},{"size":580,"mtime":1607802037823,"results":"33","hashOfConfig":"21"},{"size":2103,"mtime":1607892507365,"results":"34","hashOfConfig":"21"},{"size":1444,"mtime":1607888678547,"results":"35","hashOfConfig":"21"},{"size":515,"mtime":1607799311012,"results":"36","hashOfConfig":"21"},{"size":323,"mtime":1603308778867,"results":"37","hashOfConfig":"21"},{"size":1124,"mtime":1607814979284,"results":"38","hashOfConfig":"21"},{"size":6696,"mtime":1607892566172,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"13t0y2s",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\index.tsx",[],[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\reportWebVitals.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\App.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\services\\index.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\index.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\row-column.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\text.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-weights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\line-heights.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\font-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\colours.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\helpers\\css-utils.ts",["82","83"],"import styled, { css } from 'styled-components';\r\n\r\nexport type Margins = {\r\n    top?: string\r\n    left?: string\r\n    right?: string\r\n    bottom?: string\r\n    padding?: string\r\n};\r\n\r\nexport const margins = ( p: Margins ) => css`\r\n    ${ p.top && css`\r\n        margin-top: ${ p.top }; \r\n    ` }\r\n    ${ p.left && css`\r\n        margin-left: ${ p.left }; \r\n    ` }\r\n    ${ p.right && css`\r\n        margin-right: ${ p.right }; \r\n    ` }\r\n    ${ p.bottom && css`\r\n        margin-bottom: ${ p.bottom }; \r\n    ` }\r\n    ${ p.padding && css`\r\n        padding: ${ p.padding }; \r\n    ` }\r\n`;","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\table-view.tsx",["84"],"import React from 'react';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { Cell, TableWrapper, Thead, Tbody, Tfoot, FullWidthRow } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { calculateCellView } from './cell-view';\r\n\r\ntype Props = {\r\n    columnHeaders: string[]\r\n    displayedColumnHeaders?: Dictionary<string>\r\n    data: any[]\r\n}\r\n\r\nexport const StyledTable = ( p: Props ): JSX.Element => {\r\n    const {\r\n        columnHeaders,\r\n        displayedColumnHeaders,\r\n        data\r\n    } = p;\r\n\r\n    return (\r\n        <TableWrapper\r\n            style={{\r\n                height: '95%'\r\n            }}\r\n        >\r\n            <Thead>\r\n                <FullWidthRow>\r\n                    { columnHeaders.map( header => (\r\n                        <Cell \r\n                            key={ header }\r\n                            style={{\r\n                                width: '10rem',\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            <Text colour='extraDark' weight='bold'>\r\n                                { displayedColumnHeaders && displayedColumnHeaders[ header ] \r\n                                    ? displayedColumnHeaders[ header ] \r\n                                    : header \r\n                                }\r\n                            </Text>\r\n                        </Cell>\r\n                    ) ) }\r\n                </FullWidthRow>\r\n            </Thead>\r\n\r\n            <Tbody>\r\n                { data.map( d => (\r\n                    <FullWidthRow key={ JSON.stringify( d ) } withBorderBottom>\r\n                        { columnHeaders.map( ( header, index ) => (\r\n                            calculateCellView( d[ header ], columnHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                ) ) }\r\n            </Tbody>\r\n\r\n            <Tfoot>\r\n                <FullWidthRow>\r\n                    <Cell>Cats win!</Cell>\r\n                </FullWidthRow>\r\n            </Tfoot>\r\n\r\n        </TableWrapper>\r\n    );\r\n}; \r\n","C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\styled-components.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\spacings.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\design-system\\border-sizes.ts",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\error-message.tsx",[],"C:\\Users\\JSam\\Documents\\tests\\ptest\\src\\components\\table\\cell-view.tsx",["85","86","87"],"import React, { useCallback } from 'react';\r\nimport { Cell, FullWidthRow, TableWrapper, Tbody, Thead } from './styled-components';\r\nimport { Text } from 'components/text';\r\nimport { fontColours } from 'design-system/font-colours';\r\nimport { fontSizes } from 'design-system/font-sizes';\r\nimport { Dictionary } from 'helpers/types';\r\nimport { spacings } from 'design-system/spacings';\r\n\r\nexport enum CellViewType {\r\n    plainText,\r\n    unorderedList,\r\n    embeddedTable\r\n}\r\n\r\ntype BasicCellProps = {\r\n    colour?: keyof typeof fontColours \r\n    size?: keyof typeof fontSizes\r\n    withPaddingBottom?: boolean\r\n};\r\n\r\nexport type TextCellProps = BasicCellProps & {\r\n    text?: string \r\n    parentHeader: string\r\n};\r\n\r\nexport const SimpleTextCellView = ( p: TextCellProps ): JSX.Element => {\r\n    const {\r\n        text,\r\n        parentHeader,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n\r\n    return (\r\n        <Cell \r\n            key={ `${ text }_${ parentHeader }` } \r\n            withPaddingBottom={ withPaddingBottom }\r\n            style={{\r\n                width: '10rem',\r\n                textAlign: 'center',\r\n                marginTop: '1em'\r\n            }}\r\n        >\r\n            <Text colour={ colour } size={ size }>\r\n                { text }\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type ListCellProps = BasicCellProps & {\r\n    data: string[]\r\n};\r\n\r\nexport const UnorderedListCellView = ( p: ListCellProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        colour,\r\n        size,\r\n        withPaddingBottom\r\n    } = p;\r\n\r\n    \r\n    return (\r\n        <Cell withPaddingBottom={ withPaddingBottom }>\r\n            <Text colour={ colour } size={ size }>\r\n                <ul key={ JSON.stringify( data ) || data.join( '' ) }>\r\n                    { data.map( ( d, index ) => (\r\n                        console.log( `${ d }_${ index }` ),\r\n                        <li \r\n                            style={{\r\n                                marginBottom: spacings._4,\r\n                                maxWidth: '10rem'\r\n                            }}\r\n                            key={ `${ d }_${ index }` }\r\n                        >\r\n                            { d }\r\n                        </li>\r\n                    ) ) }\r\n                </ul>\r\n            </Text>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nexport type EmbeddedTableProps = {\r\n    data: any[]\r\n    headers: string[]\r\n    displayedHeaders?: Dictionary<string>\r\n}\r\n\r\nexport const EmbeddedTableCellView = ( p: EmbeddedTableProps ): JSX.Element => {\r\n    const {\r\n        data,\r\n        headers,\r\n        displayedHeaders\r\n    } = p;\r\n\r\n    const filteredHeaders = headers.filter( h => h.length > 1 && !parseInt( h ) );\r\n    const view = useCallback( ( data: any | null, parent: string ) => {\r\n        const fromattedData = Array.isArray( data ) && data.length === 1\r\n            ? data[0]\r\n            : data;\r\n\r\n        return calculateCellView( fromattedData, parent );\r\n    }, [] );\r\n\r\n    return (\r\n        <Cell key={ JSON.stringify( data ) }>\r\n            <TableWrapper>\r\n                { filteredHeaders.length > 0 && (\r\n                    <Thead>\r\n                        <FullWidthRow>\r\n                            { filteredHeaders.map( header => (\r\n                                <Cell \r\n                                    key={ header }\r\n                                    style={{\r\n                                        width: '10rem'\r\n                                    }}\r\n                                >\r\n                                    <Text colour='extraDark' weight='bold'>\r\n                                        { displayedHeaders && displayedHeaders[header] \r\n                                            ? displayedHeaders[header]\r\n                                            : header \r\n                                        }\r\n                                    </Text>\r\n                                </Cell>\r\n                            ) ) }\r\n                        </FullWidthRow>\r\n                    </Thead>\r\n                ) }\r\n\r\n                <Tbody>\r\n                    <FullWidthRow>\r\n                        { data.map( ( d, index ) => (\r\n                            view( d, filteredHeaders[index] )\r\n                        ) ) }\r\n                    </FullWidthRow>\r\n                </Tbody>\r\n            </TableWrapper>\r\n        </Cell>\r\n    );\r\n};\r\n\r\nconst views = {\r\n    [ CellViewType.plainText ]: ( props: TextCellProps ) => {\r\n        if ( props.text ) {\r\n            return (\r\n                <SimpleTextCellView \r\n                    text={ props.text }\r\n                    parentHeader={ props.parentHeader }\r\n                    colour={ props.colour }\r\n                    size={ props.size }\r\n                    withPaddingBottom={ props.withPaddingBottom }\r\n                />\r\n            )\r\n        } else {\r\n            return <SimpleTextCellView parentHeader={ props.parentHeader } />\r\n        }\r\n    },\r\n\r\n    [ CellViewType.unorderedList ]: ( props: ListCellProps ) => {\r\n        return (\r\n            <UnorderedListCellView\r\n                data={ props.data }\r\n                colour={ props.colour }\r\n                size={ props.size }\r\n                withPaddingBottom={ props.withPaddingBottom }\r\n            />\r\n        )\r\n    },\r\n\r\n    [ CellViewType.embeddedTable ]: ( props: EmbeddedTableProps ) => {\r\n        return (\r\n            <EmbeddedTableCellView\r\n                data={ props.data }\r\n                headers={ props.headers }\r\n                displayedHeaders={ props.displayedHeaders }\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nexport const calculateCellView = ( cellData: any | null, parentHeader: string ): JSX.Element => {\r\n    let cellView;\r\n    \r\n    if ( cellData ) {\r\n        if ( typeof cellData === 'string' ) {\r\n            cellView = views[ CellViewType.plainText ]( {\r\n                text: cellData,\r\n                parentHeader \r\n            } )\r\n        } else {\r\n            if ( Array.isArray( cellData ) && typeof cellData[0] === 'string' ) {\r\n                // presenting a string array as unordered list\r\n                cellView = views[ CellViewType.unorderedList ]( {\r\n                    data: cellData\r\n                } );\r\n\r\n                return cellView;\r\n            } else {\r\n                cellView = views[ CellViewType.embeddedTable ]( {\r\n                    data: Object.values( cellData ),\r\n                    headers: Object.keys( cellData )\r\n                } );\r\n\r\n                return cellView;\r\n            }\r\n        }\r\n    } else {\r\n        console.log( 'in' )\r\n        cellView = views[ CellViewType.plainText ]( {\r\n            parentHeader\r\n        } )\r\n    }\r\n\r\n    return cellView;\r\n};\r\n",{"ruleId":"88","severity":1,"message":"89","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":11,"column":24,"nodeType":"94","messageId":"95","endLine":11,"endColumn":41},{"ruleId":"96","severity":1,"message":"97","line":10,"column":11,"nodeType":"98","messageId":"99","endLine":10,"endColumn":14,"suggestions":"100"},{"ruleId":"96","severity":1,"message":"97","line":88,"column":11,"nodeType":"98","messageId":"99","endLine":88,"endColumn":14,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"97","line":101,"column":39,"nodeType":"98","messageId":"99","endLine":101,"endColumn":42,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"97","line":185,"column":46,"nodeType":"98","messageId":"99","endLine":185,"endColumn":49,"suggestions":"103"},"@typescript-eslint/no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["104","105"],["106","107"],["108","109"],["110","111"],{"messageId":"112","fix":"113","desc":"114"},{"messageId":"115","fix":"116","desc":"117"},{"messageId":"112","fix":"118","desc":"114"},{"messageId":"115","fix":"119","desc":"117"},{"messageId":"112","fix":"120","desc":"114"},{"messageId":"115","fix":"121","desc":"117"},{"messageId":"112","fix":"122","desc":"114"},{"messageId":"115","fix":"123","desc":"117"},"suggestUnknown",{"range":"124","text":"125"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"124","text":"126"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"127","text":"125"},{"range":"127","text":"126"},{"range":"128","text":"125"},{"range":"128","text":"126"},{"range":"129","text":"125"},{"range":"129","text":"126"},[364,367],"unknown","never",[2403,2406],[2771,2774],[5689,5692]]